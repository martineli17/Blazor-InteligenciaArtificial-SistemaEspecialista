@using Apresentation.ViewModels.CursoViewModel
@using Crosscuting.Extensions
@inject Apresentation.Services.CursoServices.GetCursoService GetCursoService
@inject Apresentation.Services.CursoServices.RemoveCursoService RemoveCursoService

@if (Cursos != null && Cursos.Any())
{
    <table class="table table-hover table-responsive-md table-borderless">
        <thead class="thead-light">
            <tr>
                <th>Nome</th>
                <th>Área de atuação</th>
                <th>Turno</th>
                <th>Carga horária</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var curso in Cursos)
            {
                <tr>
                    <td title="@curso.Nome?.ToUpper()" >@curso.Nome?.ToUpper()?.TrySubstring(30)</td>
                    <td title="@curso.AreaAtuacao?.ToUpper()">@curso.AreaAtuacao?.ToUpper().TrySubstring(30)</td>
                    <td>@curso.NameTurno?.ToUpper()</td>
                    <td>@curso.CargaHoraria</td>
                    <td>
                        <span @onclick="(() => GetFormUpdate(curso))" title="Atualizar" 
                              class="oi oi-loop-circular oi-align-center"></span>
                    </td>
                    <td>
                        <span @onclick="(() => DeleteAsync(curso.Id))" title="Remover" 
                              class="oi oi-trash text-center oi-align-center"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public bool Atualizar { get; set; }
    [Parameter] public Action<CursoGetViewModel> CallFormUpdate { get; set; }
    private IEnumerable<CursoGetViewModel> Cursos = null;
    private CursoFiltroViewModel Filtro = new CursoFiltroViewModel();

    protected override async Task OnInitializedAsync() =>
        Cursos = (IEnumerable<CursoGetViewModel>)await Service
                  .CallService(GetCursoService, Enums.EnumTipoSendService.Listar);

    protected override async Task OnParametersSetAsync() =>
        Cursos = (IEnumerable<CursoGetViewModel>)await Service
                 .CallService(GetCursoService, Enums.EnumTipoSendService.Listar);

    private async Task DeleteAsync(Guid id)
    {
        if ((bool)await Service.CallService(RemoveCursoService, Enums.EnumTipoSendService.Excluir,
                                new Apresentation.ViewModels.BaseRemoveViewModel { Id = id }))
        {
            Cursos = (IEnumerable<CursoGetViewModel>)await Service
                     .CallService(GetCursoService, Enums.EnumTipoSendService.Listar);
            StateHasChanged();
        }
    }

    private void GetFormUpdate(CursoGetViewModel curso) => CallFormUpdate.Invoke(curso);
}
